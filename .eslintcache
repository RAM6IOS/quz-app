[{"/Users/mac/Code/quzi-app/src/App.tsx":"1","/Users/mac/Code/quzi-app/src/Apis.ts":"2","/Users/mac/Code/quzi-app/src/index.tsx":"3","/Users/mac/Code/quzi-app/src/components/QuestionCard.tsx":"4","/Users/mac/Code/quzi-app/src/utils.ts":"5"},{"size":2744,"mtime":1611682495192,"results":"6","hashOfConfig":"7"},{"size":788,"mtime":1611660734383,"results":"8","hashOfConfig":"7"},{"size":221,"mtime":1611174874560,"results":"9","hashOfConfig":"7"},{"size":892,"mtime":1611682738565,"results":"10","hashOfConfig":"7"},{"size":89,"mtime":1611660270043,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"wg6jru",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mac/Code/quzi-app/src/App.tsx",["25"],"import React,{useState} from 'react';\nimport QuestionCard from \"./components/QuestionCard\";\nimport {Difficulty, fetchQuizQuestions,QuestionsState} from './Apis'\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string\n\n}\n\n const TOTAL_QUESTIONS = 15;\n\nfunction App() {\n\n  const[loading,setLoading]=useState(false);\n  const[questions , setQuestions]= useState<QuestionsState[]>([]);\n  const [number , setNumber] = useState(0);\n  const [userAnswers ,setUserAnswers]= useState<AnswerObject[]>([]);\n  const [score , setScore]=useState(0);\n  const [gameOver , setGameOver]= useState(true);\n\n\n  console.log(questions)\n\n\n\n\n\n  const startTrivia = async ()=> {\n      console.log(\"hi\");\n      setLoading(true);\n      setGameOver(false);\n\n      const newQuestions = await fetchQuizQuestions(\n        TOTAL_QUESTIONS,\n        Difficulty.EASY\n      );\n      setQuestions(newQuestions);\n      setScore(0);\n      setUserAnswers([]);\n      setNumber(0);\n      setLoading(false)\n\n\n  }\n  const checkAnswer = (e:React.MouseEvent<HTMLButtonElement>)=>{\n    if (!gameOver) {\n      // User's answer\n      const answer = e.currentTarget.value;\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // Save the answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n\n  }\n\n  const nextQuestion = () => {\n    const nextQ = number + 1;\n\n    if (nextQ === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQ);\n    }\n\n  }\n  return (\n    <>\n    <h1>Quiz app</h1>\n    {gameOver || userAnswers.length === TOTAL_QUESTIONS ?(\n    <button onClick={\n      startTrivia\n    }>start</button>\n  ) : null}\n    {!gameOver ? <p>\n      Score:\n    </p> :null}\n    {loading&& <p>Loding Qusetions...</p>}\n    {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className='next' onClick={nextQuestion} >\n            Next Question\n          </button>\n        ) : null}\n\n    </>\n  );\n}\n\nexport default App;\n","/Users/mac/Code/quzi-app/src/Apis.ts",[],"/Users/mac/Code/quzi-app/src/index.tsx",[],["26","27"],"/Users/mac/Code/quzi-app/src/components/QuestionCard.tsx",["28"],"import { type } from 'os'\nimport React from 'react';\nimport {AnswerObject} from \"../App\"\n\ntype Props = {\n  question:string;\n  answers:string[];\n  callback:(e:React.MouseEvent<HTMLButtonElement>)=> void;\n  userAnswer:AnswerObject| undefined;\n  questionNr:number;\n  totalQuestions:number;\n\n\n}\n\n const QustensCards: React.FC<Props>=({question, answers,callback,userAnswer,questionNr,totalQuestions})=> {\n  return (\n    <>\n    <p>Question:{questionNr}/{totalQuestions}</p>\n    <p dangerouslySetInnerHTML={{__html: question}}></p>\n    <div>\n      {\n        answers.map((answer , index) => (\n          <div key={index}>\n            <button disabled={!!userAnswer} onClick={callback} value={answer}>\n              <span dangerouslySetInnerHTML={{__html:answer}}></span>\n            </button>\n          </div>\n        ))\n      }\n\n    </div>\n<h1>QUZI APP</h1>\n    </>\n  )\n}\nexport default QustensCards","/Users/mac/Code/quzi-app/src/utils.ts",[],{"ruleId":"29","severity":1,"message":"30","line":21,"column":10,"nodeType":"31","messageId":"32","endLine":21,"endColumn":15},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"29","severity":1,"message":"37","line":1,"column":10,"nodeType":"31","messageId":"32","endLine":1,"endColumn":14},"@typescript-eslint/no-unused-vars","'score' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["38"],"no-negated-in-lhs",["39"],"'type' is defined but never used.","no-global-assign","no-unsafe-negation"]